
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE

small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)

# in acg, 'suite' renamed to 'block'
suite: NEWLINE INDENT stmt+ DEDENT

stmt: simple_stmt | compound_stmt

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt |
               funcdef | classdef | decorated | async_stmt


if_stmt: 'if' test ':'  suite
         ('elif' test ':' suite)*
         ['else' ':' suite]

while_stmt: 'while' test ':' suite
            ['else' ':' suite]

for_stmt: 'for' exprlist 'in' testlist ':' suite
            ['else' ':' suite]

try_stmt: ('try' ':' suite
           (
                (except_clause ':' suite)+
                ['else' ':' suite]
                ['finally' ':' suite]
            |
                'finally' ':' suite
           ))

with_stmt: 'with' with_item (',' with_item)*  ':' suite

funcdef: 'def' NAME parameters ['->' test] ':' suite

classdef: 'class' NAME ['(' [arglist] ')'] ':' suite


decorated: decorators (classdef | funcdef | async_funcdef)

async_stmt: 'async' (funcdef | with_stmt | for_stmt)